name: "Go"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CGO_ENABLED: 0

jobs:
  test_amd64:
    name: go${{ matrix.go }} (${{ matrix.os }}/amd64)
    strategy:
      matrix:
        os: [ "ubuntu", "windows", "macos" ] 
        go: [ "1.20", "1.21" ] # we support the latest 2 stable versions of Go
    runs-on: ${{ matrix.os }}-latest # use latest OS image
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}.x # use latest patch version under the minor version
    - run: go version
    - name: Build and Test
      run:  |
        go build -v ./...
        go test -v ./...

  test_linux-arm64-and-riscv64:
    name: go${{ matrix.go }} (linux/${{ matrix.arch }})
    strategy:
      matrix:
        go: [ "1.20", "1.21" ] # we support the latest 2 stable versions of Go
        arch: [ "arm64", "riscv64" ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}.x  # use latest patch version under the minor version
    - name: Install QEMU
      uses: docker/setup-qemu-action@v3
    - name: Build and Test
      run:  |
        GOARCH=${{ matrix.arch }} go build -v ./...
        GOARCH=${{ matrix.arch }} go test -v ./...

  test_macos-arm64:
    name: go${{ matrix.go }} (macos/arm64)
    strategy:
      matrix:
        go: [ "1.20", "1.21" ] # we support the latest 2 stable versions of Go
    runs-on: flyci-macos-large-latest-m1 # generously provided by www.flyci.net
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}.x # use latest patch version under the minor version
    - run: go version
    - name: Build and Test
      run:  |
        go build -v ./...
        go test -v ./...

  go_test_race:
    name: Go Race Detection
    runs-on: "ubuntu-latest"
    env:
      CGO_ENABLED: 1 # go: -race requires cgo; enable cgo by setting CGO_ENABLED=1
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: "1.21.x"
    - run: go version
    - name: Go Test
      run: go test -race ./...

  golangci-lint:
    name: lint
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21.x"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54
          args: -v --disable structcheck,govet --timeout 5m
